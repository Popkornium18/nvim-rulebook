*rule-breaker.txt*        For NVIM v0.8.0       Last change: 2023 September 21

==============================================================================
Table of Contents                             *rule-breaker-table-of-contents*

1. nvim-rule-breaker                         |rule-breaker-nvim-rule-breaker-|
  - Features                        |rule-breaker-nvim-rule-breaker--features|
  - Supported Linters for adding ignore-comments|rule-breaker-nvim-rule-breaker--supported-linters-for-adding-ignore-comments|
  - Installation                |rule-breaker-nvim-rule-breaker--installation|
  - Configuration              |rule-breaker-nvim-rule-breaker--configuration|
  - Credits                          |rule-breaker-nvim-rule-breaker--credits|

==============================================================================
1. nvim-rule-breaker                         *rule-breaker-nvim-rule-breaker-*

Add inline-comments to locally disable diagnostic rules.

Most LSPs provide code actions for to do that – this plugin adds commands for
linters and LSPs that don’t. (As such, this plugin is partially a replacement
for null-ls <https://github.com/jose-elias-alvarez/null-ls.nvim/>’s code
action feature.)

- |rule-breaker-features|
- |rule-breaker-supported-linters-for-adding-ignore-comments|
- |rule-breaker-installation|
- |rule-breaker-configuration|
- |rule-breaker-credits|


FEATURES                            *rule-breaker-nvim-rule-breaker--features*

- Add inline-comments that ignore diagnostic rules.
- Location of the ignore comment, like next line or previous line, is configurable.
- Perform a web search for a diagnostic rule.
- Requires diagnostics provided by a source that supports neovim’s builtin diagnostics system (`vim.diagnostic`). nvim’s builtin LSP client and nvim-lint <https://github.com/mfussenegger/nvim-lint> are such sources.


SUPPORTED LINTERS FOR ADDING IGNORE-COMMENTS*rule-breaker-nvim-rule-breaker--supported-linters-for-adding-ignore-comments*

- selene
- shellcheck
- vale
- yamllint
- stylelint
- LTeX

You easily add a custom via the |rule-breaker-plugin-configuration|. However,
please consider making a PR to add support for a linter if it is missing.

Ignore Rule Data for the supported linters
<./lua/rule-breaker/ignoreRuleData.lua>


INSTALLATION                    *rule-breaker-nvim-rule-breaker--installation*

>lua
    -- lazy.nvim
    {
        "chrisgrieser/nvim-rule-breaker",
        keys = {
            { "<leader>i", function() require("rule-breaker").ignoreRule() end },
            { "<leader>l", function() require("rule-breaker").lookupRule() end },
        }
    },
<

>lua
    -- packer
    use { "chrisgrieser/nvim-rule-breaker" }
    
    -- in your config
    vim.keymap.set("n", "<leader>i", function() require("rule-breaker").ignoreRule() end)
    vim.keymap.set("n", "<leader>l", function() require("rule-breaker").lookupRule() end)
<


CONFIGURATION                  *rule-breaker-nvim-rule-breaker--configuration*

>lua
    defaultConfig = {
        ignoreRuleComments = {
            selene = {
                comment = "-- selene: allow(%s)",
                location = "prevLine",
            },
            -- full list of builtin-linters found in README
            yourLinter = {
                -- %s will be replaced with rule-id
                -- if location is "encloseLine", needs to be a list of two strings
                comment = "// disabling-comment %s",
    
                -- "prevLine"|"sameLine"|"encloseLine"
                location = "prevLine",
            }
        },
    
        -- searchUrl for rule lookup. Default is the DuckDuckGo 
        -- "Ducky Search" (automatically opening first result)
        searchUrl = "https://duckduckgo.com/?q=%s+%%21ducky&kl=en-us",
    }
<


  [!NOTE] The plugin uses `vim.ui.select()`, so the appearance of the rule
  selection can be customized by using a ui-plugin like dressing.nvim
  <https://github.com/stevearc/dressing.nvim>.

CREDITS                              *rule-breaker-nvim-rule-breaker--credits*

**About Me** In my day job, I am a sociologist studying the social mechanisms
underlying the digital economy. For my PhD project, I investigate the
governance of the app economy and how software ecosystems manage the tension
between innovation and compatibility. If you are interested in this subject,
feel free to get in touch.

**Blog** I also occasionally blog about vim: Nano Tips for Vim
<https://nanotipsforvim.prose.sh>

**Profiles** - reddit <https://www.reddit.com/user/pseudometapseudo> - Discord
<https://discordapp.com/users/462774483044794368/> - Academic Website
<https://chris-grieser.de/> - Twitter <https://twitter.com/pseudo_meta> -
Mastodon <https://pkm.social/@pseudometa> - ResearchGate
<https://www.researchgate.net/profile/Christopher-Grieser> - LinkedIn
<https://www.linkedin.com/in/christopher-grieser-ba693b17a/>

**Buy Me a Coffee**

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
