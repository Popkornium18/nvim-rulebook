*rulebook.txt*           For NVIM v0.8.0          Last change: 2023 October 15

==============================================================================
Table of Contents                                 *rulebook-table-of-contents*

1. nvim-rulebook                                     |rulebook-nvim-rulebook-|
  - Features                                |rulebook-nvim-rulebook--features|
  - Supported Sources              |rulebook-nvim-rulebook--supported-sources|
  - Installation                        |rulebook-nvim-rulebook--installation|
  - Configuration                      |rulebook-nvim-rulebook--configuration|
  - Customize Built-in Sources|rulebook-nvim-rulebook--customize-built-in-sources|
  - Limitations                          |rulebook-nvim-rulebook--limitations|
  - API                                          |rulebook-nvim-rulebook--api|
  - Credits                                  |rulebook-nvim-rulebook--credits|

==============================================================================
1. nvim-rulebook                                     *rulebook-nvim-rulebook-*



Addinline-comments to ignore rules, or lookup rule documentation online.

Some LSPs provide code actions for that – this plugin adds commands for
linters and LSPs that don’t.

- |rulebook-features|
- |rulebook-supported-sources|
    - |rulebook-rule-lookup|
    - |rulebook-add-ignore-comment|
- |rulebook-installation|
- |rulebook-configuration|
- |rulebook-customize-built-in-sources|
- |rulebook-limitations|
- |rulebook-api|
    - |rulebook-availability-of-rule-lookup|
- |rulebook-credits|


FEATURES                                    *rulebook-nvim-rulebook--features*

- Look up official rule documentation, falling back to a web search if the
    source does not have rule documentation.
- Add inline-comments to ignore rules like `// eslint disable-next-line   some-rule`. Supports previous line, same line, and enclosing lines.
- QoL: auto-select a rule if it is the only one in the current line; if the line
    has no diagnostic, search forward up to the next line that does.
- Includes built-in support for various linters. Zero plugin configuration
    required if you only need to use built-in sources.
- Customizing built-in sources or adding your own sources is easy. PRs to add
    more built-ins are welcome.


SUPPORTED SOURCES                  *rulebook-nvim-rulebook--supported-sources*

You easily add a custom source via the |rulebook-plugin-configuration|. Though,
please consider making a PR to add support for a source if it is missing.

Rule Data for the supported linters <./lua/rulebook/data>


RULE LOOKUP ~

- `LTeX`
- `Lua Diagnostics.`
- `Pyright`
- `Ruff`
- `biome`
- `clang-tidy`
- `eslint`
- `markdownlint`
- `pylint`
- `selene`
- `shellcheck`
- `stylelint`
- `yamllint`


ADD IGNORE COMMENT ~

- LTeX <https://valentjn.github.io/ltex/advanced-usage.html>
- Pyright <https://microsoft.github.io/pyright/#/comments>
- biome <https://biomejs.dev/linter/#ignoring-code>
- clang-tidy <https://clang.llvm.org/extra/clang-tidy/#suppressing-undesired-diagnostics>
- codespell <https://github.com/codespell-project/codespell/issues/1212#issuecomment-1721152455>
- editorconfig-checker <https://github.com/editorconfig-checker/editorconfig-checker#excluding-lines>
- eslint <https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1>
- pylint <https://pylint.readthedocs.io/en/latest/user_guide/messages/message_control.html>
- selene <https://kampfkarren.github.io/selene/usage/filtering.html#allowingdenying-lints-for-an-entire-file>
- shellcheck <https://www.shellcheck.net/wiki/Ignore>
- stylelint <https://stylelint.io/user-guide/ignore-code/>
- typescript <https://www.typescriptlang.org/>
- vale <https://vale.sh/docs/topics/config/#markup-based-configuration>
- yamllint <https://yamllint.readthedocs.io/en/stable/disable_with_comments.html>


INSTALLATION                            *rulebook-nvim-rulebook--installation*

This plugin requires diagnostics provided by a source that supports Neovim’s
built-in diagnostics system. (nvim’s built-in LSP client or nvim-lint
<https://github.com/mfussenegger/nvim-lint> are such sources.)

>lua
    -- lazy.nvim
    {
        "chrisgrieser/nvim-rulebook",
        keys = {
            { "<leader>i", function() require("rulebook").ignoreRule() end },
            { "<leader>l", function() require("rulebook").lookupRule() end },
        }
    },
<

>lua
    -- packer
    use { "chrisgrieser/nvim-rulebook" }
    
    -- in your config
    vim.keymap.set("n", "<leader>i", function() require("rulebook").ignoreRule() end)
    vim.keymap.set("n", "<leader>l", function() require("rulebook").lookupRule() end)
<


CONFIGURATION                          *rulebook-nvim-rulebook--configuration*

The configuration is optional. You only need to add a config when you want to
customize a source or add custom sources.

When adding your own source, you must add the _exact_, case-sensitive
source-name. (for example, `clang-tidy`, not `clang`).

>lua
    require("rulebook").setup = ({
        ignoreComments = {
            selene = {
                comment = "-- selene: allow(%s)",
                location = "prevLine",
            },
            -- ... (full list of supported sources can be found in the README)
    
            yourCustomSource = { -- exact, case-sensitive source-name
                comment = "// disabling-comment %s", -- %s will be replaced with rule-id
                location = "prevLine", -- "prevLine"|"sameLine"|"encloseLine"
            }
    
            -- if location is "encloseLine", needs to be a list of two strings
            anotherCustomSource = {
                comment = { "// disable-rule %s", "// enable-rule %s" },
                location = "encloseLine",
            }
        },
    
        ruleDocs = {
            selene = "https://kampfkarren.github.io/selene/lints/%s.html"
            -- ... (full list of supported sources can be found in the README)
    
            -- Search URL when no documentation definition is available for a
            -- diagnostic source. `%s` will be replaced with the diagnostic source & code.
            -- Default is the DDG "Ducky Search" (automatically opening first result).
            fallback = "https://duckduckgo.com/?q=%s+%%21ducky&kl=en-us",
    
            -- the value of the rule documentations accept either a string or a function
            -- if a string, `%s` will be replaced with rule-id
            -- if a function, takes a `:h diagnostic-structure` as argument and must return a url
            yourCustomSource = "https://my-docs/%s.hthml",
            anotherCustomSource = function(diag)
                -- ...
                return url
            end,
        }
    
        -- if no diagnostic is found in current line, search this many lines forward
        forwSearchLines = 10,
    })
<

The plugin uses |vim.ui.select|, so the appearance of the rule selection can be
customized by using a UI-plugin like dressing.nvim
<https://github.com/stevearc/dressing.nvim>.


CUSTOMIZE BUILT-IN SOURCES*rulebook-nvim-rulebook--customize-built-in-sources*

Built-in sources be customized by overwriting them in the configuration:

>lua
    -- use `disable-line` instead of the default `disable-next-line` for eslint
    require("rulebook").setup = {
        ignoreComments = {
            eslint = {
                comment = "// eslint-disable-line %s",
                location = "sameLine",
            },
        },
    }
<


LIMITATIONS                              *rulebook-nvim-rulebook--limitations*

- The diagnostics have to contain the necessary data, |that is a diagnostic code
    and diagnostic
    source|. Most
    LSPs, and most linters configured for `nvim-lint` do that, but some diagnostic
    sources do not (for example `efm-langserver` with incorrectly defined
    `errorformat`). Please open an issue at the diagnostics provider to fix such
    issues.
- This plugin does not hook into `vim.lsp.buf.code_action`, but provides its own
    selector.


API                                              *rulebook-nvim-rulebook--api*


AVAILABILITY OF RULE LOOKUP ~

The function `require("rulebook").hasDocs(diag)`, expects a diagnostic object
and returns a boolean whether `nvim-rulebook` documentation for the respective
diagnostic available. One use case for this is to add a visual indicator if
there is a rule lookup available for a diagnostic (see
|vim.diagnostic.config|).

>lua
    vim.diagnostic.config {
        virtual_text = {
            suffix = function(diag) return require("rulebook").hasDocs(diag) and "  " or "" end,
        },
    }
<


CREDITS                                      *rulebook-nvim-rulebook--credits*

**About Me** In my day job, I am a sociologist studying the social mechanisms
underlying the digital economy. For my PhD project, I investigate the
governance of the app economy and how software ecosystems manage the tension
between innovation and compatibility. If you are interested in this subject,
feel free to get in touch.

**Blog** I also occasionally blog about vim: Nano Tips for Vim
<https://nanotipsforvim.prose.sh>

**Profiles** - reddit <https://www.reddit.com/user/pseudometapseudo> - Discord
<https://discordapp.com/users/462774483044794368/> - Academic Website
<https://chris-grieser.de/> - Twitter <https://twitter.com/pseudo_meta> -
Mastodon <https://pkm.social/@pseudometa> - ResearchGate
<https://www.researchgate.net/profile/Christopher-Grieser> - LinkedIn
<https://www.linkedin.com/in/christopher-grieser-ba693b17a/>

**Buy Me a Coffee**

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
