*rulebook.txt*          For NVIM v0.8.0         Last change: 2023 September 26

==============================================================================
Table of Contents                                 *rulebook-table-of-contents*

1. nvim-rulebook                                     |rulebook-nvim-rulebook-|
  - Supported Sources              |rulebook-nvim-rulebook--supported-sources|
  - Installation                        |rulebook-nvim-rulebook--installation|
  - Configuration                      |rulebook-nvim-rulebook--configuration|
  - Customize Built-in Sources|rulebook-nvim-rulebook--customize-built-in-sources|
  - Limitations                          |rulebook-nvim-rulebook--limitations|
  - Credits                                  |rulebook-nvim-rulebook--credits|

==============================================================================
1. nvim-rulebook                                     *rulebook-nvim-rulebook-*



Add inline-comments to ignore rules, or lookup rule documentation online.

Some LSPs provide code actions for that – this plugin adds commands for
linters and LSPs that don’t.

- |rulebook-supported-sources|
    - |rulebook-rule-lookup|
    - |rulebook-add-ignore-comment|
- |rulebook-installation|
- |rulebook-configuration|
- |rulebook-customize-built-in-sources|
- |rulebook-limitations|
- |rulebook-credits|


SUPPORTED SOURCES                  *rulebook-nvim-rulebook--supported-sources*

You easily add a custom source via the |rulebook-plugin-configuration|. Though,
please consider making a PR to add support for a source if it is missing.

Rule Data for the supported linters <./lua/rulebook/rule-data.lua>


RULE LOOKUP ~

- `Lua Diagnostics.`
- `biome`
- `eslint`
- `markdownlint` 
- `pylint`
- `ruff`
- `selene`
- `shellcheck`
- `stylelint`
- `yamllint`

_These sources do not support opening the exact rule site and therefore fall
back to an index page which contains the rule. The code is copied to the
clipboard for easier selection of the rule at the site._


ADD IGNORE COMMENT ~

- LTeX <https://valentjn.github.io/ltex/advanced-usage.html>
- Pyright <https://microsoft.github.io/pyright/#/comments>
- biome <https://biomejs.dev/linter/#ignoring-code>
- eslint <https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1>
- pylint <https://pylint.readthedocs.io/en/latest/user_guide/messages/message_control.html>
- selene <https://kampfkarren.github.io/selene/usage/filtering.html#allowingdenying-lints-for-an-entire-file>
- shellcheck <https://www.shellcheck.net/wiki/Ignore>
- stylelint <https://stylelint.io/user-guide/ignore-code/>
- typescript <https://www.typescriptlang.org/>
- vale <https://vale.sh/docs/topics/config/#markup-based-configuration>
- yamllint <https://yamllint.readthedocs.io/en/stable/disable_with_comments.html>


INSTALLATION                            *rulebook-nvim-rulebook--installation*

This plugin requires diagnostics provided by a source that supports neovim’s
builtin diagnostics system. (nvim’s builtin LSP client or nvim-lint
<https://github.com/mfussenegger/nvim-lint> are such sources.)

>lua
    -- lazy.nvim
    {
        "chrisgrieser/nvim-rulebook",
        keys = {
            { "<leader>i", function() require("rulebook").ignoreRule() end },
            { "<leader>l", function() require("rulebook").lookupRule() end },
        }
    },
<

>lua
    -- packer
    use { "chrisgrieser/nvim-rulebook" }
    
    -- in your config
    vim.keymap.set("n", "<leader>i", function() require("rulebook").ignoreRule() end)
    vim.keymap.set("n", "<leader>l", function() require("rulebook").lookupRule() end)
<


CONFIGURATION                          *rulebook-nvim-rulebook--configuration*

The configuration is completely optional, the plugin works fine out of the box.
The Configuration is only needed when you want to customize a source or add
custom sources.

>lua
    defaultConfig = {
        ignoreRuleComments = {
            selene = {
                comment = "-- selene: allow(%s)",
                location = "prevLine",
            },
            -- ... (full list of supported sources can be found in the README)
    
            yourCustomSource = {
                -- %s will be replaced with rule-id
                comment = "// disabling-comment %s",
    
                -- "prevLine"|"sameLine"|"encloseLine"
                location = "prevLine",
            }
    
            -- if location is "encloseLine", needs to be a list of two strings
            anotherCustomSource = {
                comment = { "// disable-rule %s", "// enable-rule %s" },
                location = "encloseLine",
            }
        },
    
        ruleDocumentations = {
            selene = "https://kampfkarren.github.io/selene/lints/%s.html"
            -- ... (full list of supported sources can be found in the README)
    
            -- Search URL when no documentation definition is available for a
            -- diagnostic source. "%s" will be replaced with the diagnostic source & code.
            -- Default is the DDG "Ducky Search" (automatically opening first result).
            fallback = "https://duckduckgo.com/?q=%s+%%21ducky&kl=en-us",
    
            -- the value of the rule documentions accept either a string or a function
            -- if a string, %s will be replaced with rule-id
            -- if a function, takes a diagnostic object as argument must return a url
            yourCustomSource = "https://my-docs/%s.hthml",
            anotherCustomSource = function(diag)
                -- ...
                return url
            end,
        }
    
        -- If no diagnostic is found, in current line, search this meany lines 
        -- forward for diagnostics before aborting.
        forwSearchLines = 10,
    }
<

The plugin uses |vim.ui.select|, so the appearance of the rule selection can be
customized by using a ui-plugin like dressing.nvim
<https://github.com/stevearc/dressing.nvim>.


CUSTOMIZE BUILT-IN SOURCES*rulebook-nvim-rulebook--customize-built-in-sources*

Built-in sources be customized by overwriting them in the configuration:

>lua
    -- use `disable-line` instead of the default `disable-next-line`
    defaultConfig = {
        ignoreRuleComments = {
            eslint ={
                comment = "// eslint-disable-line %s",
                location = "sameLine",
            } 
        }
    }
<


LIMITATIONS                              *rulebook-nvim-rulebook--limitations*

- The diagnostics have to contain the necessary data, |that is a diagnostic code and diagnostic source|. Most LSPs and most linters configured for `nvim-lint` do that, but some diagnostic sources do not (for example `efm-langserver` with incorrectly defined errorformat). Please open an issue at the diagnostics provider to fix.
- This plugin does _not_ hook into `vim.lsp.buf.code_action`, but provides its own selector.


CREDITS                                      *rulebook-nvim-rulebook--credits*

**About Me** In my day job, I am a sociologist studying the social mechanisms
underlying the digital economy. For my PhD project, I investigate the
governance of the app economy and how software ecosystems manage the tension
between innovation and compatibility. If you are interested in this subject,
feel free to get in touch.

**Blog** I also occasionally blog about vim: Nano Tips for Vim
<https://nanotipsforvim.prose.sh>

**Profiles** - reddit <https://www.reddit.com/user/pseudometapseudo> - Discord
<https://discordapp.com/users/462774483044794368/> - Academic Website
<https://chris-grieser.de/> - Twitter <https://twitter.com/pseudo_meta> -
Mastodon <https://pkm.social/@pseudometa> - ResearchGate
<https://www.researchgate.net/profile/Christopher-Grieser> - LinkedIn
<https://www.linkedin.com/in/christopher-grieser-ba693b17a/>

**Buy Me a Coffee**

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
